#!/usr/bin/env python3
"""
Intelligence Agent - Main Entry Point (UPDATED)
Enhanced with database connection error handling and fallbacks
"""

import asyncio
import os
import sys
from pathlib import Path

# Ensure project root is in path
project_root = Path(__file__).parent
sys.path.insert(0, str(project_root))

from config.settings import get_settings, setup_logging, print_configuration_summary
from config.validators import ConfigValidationError
import logging

logger = logging.getLogger(__name__)

# Global fallback connection
fallback_db = None

async def initialize_fallback_connection():
    """Initialize fallback database connection"""
    global fallback_db
    try:
        from scripts.database_direct_connection import DirectDatabaseConnection
        fallback_db = DirectDatabaseConnection()
        if await fallback_db.initialize():
            logger.info("✅ Fallback database connection ready")
            return True
    except Exception as e:
        logger.warning(f"⚠️ Fallback connection failed: {e}")
    return False

async def run_strategic_analysis():
    """Run strategic analysis workflow with error handling"""
    settings = get_settings()
    
    try:
        # Initialize components
        from core.extractors import SupabaseDocumentExtractor
        from core.agents import StrategicAgentWorkflow
        
        doc_extractor = SupabaseDocumentExtractor(
            settings.database.url,
            settings.database.key,
            settings.embedding.model_name
        )
        
        workflow = StrategicAgentWorkflow(doc_extractor)
        
        print("🎯 Running Strategic Analysis...")
        
        # Example analysis
        results = await workflow.execute_strategic_workflow(
            query="What are our key strategic priorities and execution gaps?",
            user_intent="strategic_analysis",
            priority="high"
        )
        
        # Display results
        synthesis = results['final_synthesis']
        print(f"\n📊 Success Probability: {synthesis['success_probability']:.1%}")
        print(f"🚀 Next Decision Point: {synthesis['next_decision_point']}")
        
        for finding in synthesis['key_findings']:
            print(f"   • {finding}")
            
    except Exception as e:
        logger.error(f"❌ Strategic analysis failed: {e}")
        print(f"❌ Strategic analysis encountered an error: {e}")
        
        # Try fallback analysis
        if fallback_db:
            print("🔄 Attempting fallback analysis...")
            try:
                intelligence = await fallback_db.get_business_intelligence()
                insights = await fallback_db.get_strategic_insights()
                
                print("✅ Fallback analysis successful!")
                print("📊 Key findings from direct database analysis:")
                for insight in insights[:3]:
                    print(f"   • {insight}")
                    
            except Exception as fallback_error:
                logger.error(f"❌ Fallback analysis also failed: {fallback_error}")
        else:
            print("💡 Run database diagnostics: python scripts/database_diagnostics.py")

async def run_business_intelligence():
    """Run business intelligence analysis with error handling"""
    print("📈 Running Business Intelligence Analysis...")
    
    try:
        from analysis.business import BusinessStrategicIntelligenceSystem
        
        system = BusinessStrategicIntelligenceSystem()
        insights = await system.comprehensive_business_analysis()
        
        return insights
        
    except Exception as e:
        logger.error(f"❌ Business intelligence failed: {e}")
        print(f"❌ Business intelligence analysis failed: {e}")
        
        # Try direct database fallback
        if fallback_db:
            print("🔄 Running fallback business analysis...")
            try:
                intelligence = await fallback_db.get_business_intelligence()
                
                print("✅ Fallback business analysis successful!")
                print("📊 Business Intelligence Summary:")
                
                if 'portfolio' in intelligence:
                    portfolio = intelligence['portfolio']
                    print(f"   • Portfolio: {portfolio['total_projects']} projects")
                    print(f"   • Revenue Pipeline: ${portfolio['total_revenue_pipeline']:,.0f}")
                
                if 'clients' in intelligence:
                    clients = intelligence['clients']
                    print(f"   • Clients: {clients['total_clients']} active relationships")
                
                return intelligence
                
            except Exception as fallback_error:
                logger.error(f"❌ Fallback business analysis failed: {fallback_error}")
        
        print("💡 Try: python scripts/database_direct_connection.py")
        return {}

async def run_ai_briefing():
    """Run AI Chief of Staff briefing with error handling"""
    print("📋 Generating AI Chief of Staff Briefing...")
    
    try:
        from analysis.strategic import AIChiefOfStaffEnhanced
        
        ai_chief = AIChiefOfStaffEnhanced()
        briefing = await ai_chief.generate_daily_briefing()
        
        print(briefing)
        return briefing
        
    except Exception as e:
        logger.error(f"❌ AI briefing failed: {e}")
        print(f"❌ AI briefing generation failed: {e}")
        
        # Generate fallback briefing
        if fallback_db:
            print("🔄 Generating fallback briefing...")
            try:
                intelligence = await fallback_db.get_business_intelligence()
                insights = await fallback_db.get_strategic_insights()
                
                # Create simple briefing
                briefing = f"""
# 📊 STRATEGIC BRIEFING (FALLBACK MODE)

**Date:** {datetime.now().strftime('%Y-%m-%d %H:%M')}

## 🎯 EXECUTIVE SUMMARY

**System Status:** Running in fallback mode with direct database access

## 📈 KEY BUSINESS METRICS
"""
                
                if 'portfolio' in intelligence:
                    portfolio = intelligence['portfolio']
                    briefing += f"""
• **Project Portfolio:** {portfolio['total_projects']} active projects
• **Revenue Pipeline:** ${portfolio['total_revenue_pipeline']:,.0f}
• **Top Project:** {portfolio['top_projects'][0]['name'] if portfolio['top_projects'] else 'N/A'}
"""
                
                if 'clients' in intelligence:
                    briefing += f"""
• **Client Base:** {intelligence['clients']['total_clients']} active clients
"""
                
                briefing += f"""

## 🎯 STRATEGIC INSIGHTS

"""
                for insight in insights[:5]:
                    briefing += f"• {insight}\n"
                
                briefing += """

## 💡 NEXT STEPS

1. Restore full system connectivity for enhanced analysis
2. Run comprehensive intelligence gathering
3. Review strategic priorities based on current data

---
*Generated in fallback mode - full briefing available when system restored*
"""
                
                print(briefing)
                return briefing
                
            except Exception as fallback_error:
                logger.error(f"❌ Fallback briefing failed: {fallback_error}")
        
        print("💡 Try: python scripts/database_direct_connection.py")
        return ""

async def run_database_diagnostics():
    """Run database diagnostics"""
    print("🔍 Running Database Diagnostics...")
    
    try:
        # Import and run diagnostics
        import subprocess
        result = subprocess.run([
            sys.executable, 
            str(project_root / "scripts" / "database_diagnostics.py")
        ], capture_output=True, text=True)
        
        print(result.stdout)
        if result.stderr:
            print("Errors:", result.stderr)
            
    except Exception as e:
        logger.error(f"❌ Diagnostics failed: {e}")
        print(f"❌ Could not run diagnostics: {e}")
        print("💡 Try manually: python scripts/database_diagnostics.py")

async def main():
    """Main application entry point with enhanced error handling"""
    print("🚀 INTELLIGENCE AGENT SYSTEM")
    print("=" * 50)
    
    try:
        # Check configuration
        profile = os.getenv('CONFIG_PROFILE', 'development')
        print(f"🔧 Loading configuration profile: {profile}")
        
        settings = get_settings(profile)
        setup_logging(settings)
        
        print(f"✅ Configuration loaded (Environment: {settings.environment})")
        
        # Initialize fallback connection
        print("🔄 Initializing database connections...")
        fallback_ready = await initialize_fallback_connection()
        
        if fallback_ready:
            print("✅ Fallback database connection ready")
        else:
            print("⚠️ Fallback connection unavailable - some features may be limited")
        
        # Show configuration summary if in debug mode
        if settings.debug:
            print()
            print_configuration_summary(settings)
        
        # Show menu
        print("\nSelect operation:")
        print("1. Strategic Analysis Workflow")
        print("2. Business Intelligence Analysis") 
        print("3. AI Chief of Staff Briefing")
        print("4. Run All Systems")
        print("5. Database Diagnostics")
        print("6. Direct Database Test")
        
        choice = input("\nEnter choice (1-6) or press Enter for business intelligence: ").strip()
        
        if choice == "1":
            await run_strategic_analysis()
        elif choice == "3":
            await run_ai_briefing()
        elif choice == "4":
            print("🔄 Running all systems...")
            await run_strategic_analysis()
            await run_business_intelligence()
            await run_ai_briefing()
        elif choice == "5":
            await run_database_diagnostics()
        elif choice == "6":
            if fallback_db:
                print("🔄 Testing direct database connection...")
                intelligence = await fallback_db.get_business_intelligence()
                insights = await fallback_db.get_strategic_insights()
                print("✅ Direct database test successful!")
            else:
                print("❌ Direct database connection not available")
                print("💡 Try: python scripts/database_direct_connection.py")
        else:
            # Default: business intelligence
            await run_business_intelligence()
        
        print("\n🎯 Analysis complete!")
        
    except (ValueError, ConfigValidationError) as e:
        print(f"❌ Configuration Error: {e}")
        print("\n🔧 Setup required:")
        print("1. Copy .env.example to .env")
        print("2. Configure SUPABASE_URL and SUPABASE_KEY")
        print("3. Run: python scripts/config_manager.py validate")
        print("4. Run: python scripts/setup_database.py")
        return 1
        
    except Exception as e:
        logger.error(f"❌ System error: {e}")
        print(f"❌ System Error: {e}")
        
        # Try to provide helpful troubleshooting
        print("\n🔧 TROUBLESHOOTING STEPS:")
        print("1. Run database diagnostics:")
        print("   python scripts/database_diagnostics.py")
        print("2. Test direct connection:")
        print("   python scripts/database_direct_connection.py")
        print("3. Check environment configuration:")
        print("   python scripts/config_manager.py validate")
        print("4. Review system logs for detailed errors")
        
        return 1
    
    return 0

if __name__ == "__main__":
    from datetime import datetime
    exit_code = asyncio.run(main())
    sys.exit(exit_code)